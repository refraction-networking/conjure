#!/bin/bash
## Conjure configuration file
# -- This file currently operates as a manually tuned configuration for systemd. In
#    the future this may be automatically generated by a configuration script that
#    takes into account things like Tapdance presence, zbalance version and build.

# indicates to start_zbalance_ipc.sh to create two sets of queues. Used for
# running two conjure stations or a conjure station together with tapdance.
# Only options right now are 1 and anything else (which runs 2 queue sets).
N_QUEUE_SETS=1

# indicates the version of pf_ring to be installed while building docker containers, or while
# using `scripts/install_pfring.sh`.
PFRING_VER="latest"

# Kernel driver used for the pfring (used by on-reboot.sh)
# PF_DRIVER="e1000e"

# The Zbalance_ipc cluster id that conjure will connect to
CJ_CLUSTER_ID=98

# The fisrt core to stand up a detector on, 1 set here to give single zbalance thread its own core
CJ_COREBASE=0

# number of cores to launch detector threads on (increments from $CJ_COREBASE)
CJ_CORECOUNT=4

# Specify a core numerically to avoid.
CJ_SKIP_CORE=

# Interval for detector metrics logging
CJ_LOG_INTERVAL=5

# private key used by the detectors
CJ_PRIVKEY=/var/lib/conjure/privkey

# if running on a host where we need to connect to zbalance queues starting at a non-zero index
#    specify that index here. queue attachment will happen incrementally from this index up to
#    the value specified in $CJ_CORECOUNT.
CJ_QUEUE_OFFSET=0

# Path to the configuration file for the application and proxying portions of
# the station. Used by the conjure-app service
CJ_STATION_CONFIG=/var/lib/conjure/app_config.toml

# Path to the configuration file for the registration api. Used by the conjure-reg service
CJ_REGISTRAR_CONFIG=/var/lib/conjure/reg_config.toml

# Path to the configuration file containing phantom subnets. used primarily by
# the conjure-app service to figure out what subnets to choose from for new
# registrations.
PHANTOM_SUBNET_LOCATION=/var/lib/conjure/phantom_subnets.toml

# Allow the station to log client IPs (default disabled)
LOG_CLIENT_IP=false

# TODO add to per-station configs
# CJ_IFACE="zc:enp179s0f0,zc:enp179s0f1"


# 1 - IP hash
# 7 - ERSPAN hash (custom; for rockypika)
ZBALANCE_HASH_MODE=1
ZBALANCE_CORE=1

# This is a hack to allow us to parse GRE/ERSPAN on some stations.
# Normal tap stations will set this to 0, but GRE-tap stations will
# set this to the number of bytes the Ether+IP+GRE headers are for
# that instance (e.g. ERSPAN on rockypika should be 42)
PARSE_GRE_OFFSET=0


CJ_PATH=/opt/conjure/

# ========================================================== #
# Local Network settings SET THESE FOR EACH DIFFERENT STATION

# IPv4 address of non-tap local interface
IP4_ADDR="127.0.0.1"

# IPv6 address of non-tap local interface.
IP6_ADDR="[::1]"

# tun interface offset (used when running multiple station on the same machine)
OFFSET=0



# set_default() sets $1=$2 if $1 is unset, exports the variable and echoes result
set_default() {
    if [ $# -ne 2 ]; then
        echo "set_default: 2 arguments are required"
        exit 1
    fi

    var=$1
    default=$2

    if [ -z "${!var}" ]; then
        export "${var}=${default}"
    	echo "applying default: ${var}=${!var}"
    else
        export "${var}=${!var}"
    	echo "using preset: ${var}=${!var}"
    fi
}

# get_ifc_and_driver() tries to auto-detect the interface and driver to use.
# On success, sets CJ_IFACE and PF_DRIVER.
# This helper blows away any previous values (hence it is called only when neither is set).
# In production you should set these explicitly to avoid surprises.

# Finds the first interface using a known driver (currently only i40e and ixgbe) which
# - has no inet addr
# - is Ethernet
get_ifc_and_driver() {
    # FIXME: Full path to these commands?
    # Use ifconfig with -a to check down interfaces too
    # for CJ_IFACE in $(ifconfig | grep ^e | awk '{print $1}'); do
    for CJ_IFACE in $(ifconfig -a | grep ^e | awk '{print $1}'); do
        # Need additional checks to find the "right" device
        # Here we require it have no ipv4 address, be Ethernet, and be "RUNNING" per ifconfig
        # As well as using one of the 2 supported drivers.
        export CJ_IFACE
        if ! ifconfig $CJ_IFACE | grep -q "inet\s"; then
            # Ensure Link encap:Ethernet? (has that in ifconfig)
            if ip addr l $CJ_IFACE | grep -q "link/ether"; then
                # In general, can't do any more tests.
                # If you will have the interface up, then we could do
                # an extra test:
                # ISRUNNING=$(ifconfig $CJ_IFACE | grep "UP BROADCAST RUNNING MULTICAST");
                # The real requirement is: it can come up, and if it were,
                # we'd see traffic as expected.
                PF_DRIVER=$(ethtool -i $CJ_IFACE| grep driver | awk '{print $2}');
                export PF_DRIVER
                if [ "x$PF_DRIVER" = "xixgbe" ]; then
		    echo "automatically detected $PF_DRIVER iface: $CJ_IFACE"
                    return
                fi
                if [ "x$PF_DRIVER" = "xi40e" ]; then
		    echo "automatically detected $PF_DRIVER iface: $CJ_IFACE"
                    return
                fi
                unset PF_DRIVER # Avoid picking the last (failed) candidate DRIVER
            fi
        fi
    done

    # Avoid returning the last (failed) candidate
    unset CJ_IFACE
    unset PF_DRIVER

    # >&2 echo "Failed to auto-detect interface and driver"
    echo "Failed to auto-detect interface and driver; falling back to defaults"

    return
}

# If neither the IFACE or DRIVER is set explicitly, try to auto-detect both.
if [ -z "$CJ_IFACE" ] && [ -z "$PF_DRIVER" ] ; then
    get_ifc_and_driver
fi

## change may require reboot
set_default PF_DRIVER          i40e #{i40e, ixgbe}


# Read local configs to allow for override of any of these settings
if [ -r /var/lib/conjure/conjure.conf ] && [ -z "${CJ_STOP_RECURSE+x}" ]; then
    echo "Applying local configs from /var/lib/conjure/conjure.conf"
    CJ_STOP_RECURSE="true"
    . /var/lib/conjure/conjure.conf
fi

unset CJ_STOP_RECURSE
